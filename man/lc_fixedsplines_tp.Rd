% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/leftcensored_fixedsplines_tp.R
\name{lc_fixedsplines_tp}
\alias{lc_fixedsplines_tp}
\title{Thin plate splines for censored data}
\usage{
lc_fixedsplines_tp(
  data,
  x = "x",
  y = "y",
  uncensored = "uncensored",
  threshold = "threshold",
  k = 5,
  predict_x = 50,
  n.chains = 2,
  n.iter = 4000,
  n.burnin = 4000,
  n.thin = 5,
  model_parameters_for_convergence = c("b", "rho", "lambda", "scale"),
  normalize = TRUE,
  make_data_only = FALSE,
  initialize_only = FALSE,
  raftery = TRUE,
  max.time = "2 minutes",
  keep_jags_model = FALSE,
  keep_mcmc_model = FALSE,
  measurement_error = NULL,
  compare_with_last = FALSE
)
}
\arguments{
\item{data}{Data frame}

\item{x}{The name of the x (predictor) variable (must be quoted)}

\item{y}{The name of the y (response) variable (must be quoted)}

\item{uncensored}{The name of the variable telling which y values that are censored. The variable must
equal 0 for censored data and 1 for uncensored data. Must be in quotes.}

\item{threshold}{The name of the variable giving the threshold for censoring (for censored data only). E.g.,
for chemical data it typically is the quantification limit. Must be in quotes.}

\item{k}{Number of degrees of freedom for the thin-plate spline function. k = 1 results in a constant model (Y = b), while
k = 2 results in a linear model (ordinary linear regression)}

\item{predict_x}{A single number or a vector giving the x values that will be used for prediction (e.g., for
plotting the fit). If a single number is given, it is interpreted as the number of x values to use.}

\item{n.chains}{Used by JAGS (see runjags::autorun.jags)}

\item{n.iter}{Used by JAGS (see runjags::autorun.jags)}

\item{n.burnin}{Used by JAGS (see runjags::autorun.jags)}

\item{n.thin}{Used by JAGS (see runjags::autorun.jags)}

\item{model_parameters_for_convergence}{}

\item{normalize}{Whether data will be normalized before they are sent to JAGS (default = TRUE)}

\item{make_data_only}{Default = FALSE}

\item{initialize_only}{Default = FALSE}

\item{raftery}{Whether Raftery's criterion for convergence will be used (default = TRUE)}

\item{max.time}{See runjags::autorun.jags. Default = "2 minutes"}

\item{keep_jags_model}{Default = FALSE}

\item{keep_mcmc_model}{Default = FALSE}

\item{measurement_error}{The name of the variable that contains the measurement error. Must be in quotes.
If it's not set, the model will be fitted without measurement error.}

\item{compare_with_last}{Whether the function will estimate the difference between the last value
used for prediction and all the other values (given by predict_x). USeful if x represents time, and
you want to get an estimate of change (e.g., the change over the last 10 years). Default = FALSE.}
}
\value{
A list including \code{summary} (summary of the JAGS coda object), \code{plot_data} (x and y
data for plotting the fitted model), and \code{dic} (the DIC value).
}
\description{
Thin plate splines for censored data
}
\examples{



# Simulate data ----
set.seed(2) ## simulate some data... 
n <- 50
dat <- mgcv::gamSim(1,n=n,dist="normal",scale=1)  

# we will use only x2 and y, and x2 is renamed 'x'
dat <- dat[c("x2", "y")]
names(dat)[1] <- "x"

# Plot original data  
ggplot(dat, aes(x, y)) +
  geom_point()

# Make censored data (here, using a fixed thresholdm, but that is not necessary)
thresh <- 4
dat_cens <- dat[c("x","y")]
dat_cens$y_orig <- dat_cens$y       # original (will not be used)
sel_uncens <- dat_cens$y > thresh
dat_cens$y[!sel_uncens] <- NA
dat_cens$cut <- thresh
dat_cens$cut[sel_uncens] <- NA
dat_cens$uncensored <- 0
dat_cens$uncensored[sel_uncens] <- 1

# Plot censored data
ggplot() +
  geom_point(data = dat_cens[sel_uncens,], aes(x = x, y = y)) +
  geom_point(data = dat_cens[!sel_uncens,], aes(x = x, y = cut), shape = 6)

# Quick test that JAGS runs
# debugonce(lc_fixedsplines_tp)
test <- lc_fixedsplines_tp(data = dat_cens, x = "x", y = "y", uncensored = "uncensored", threshold = "cut",
                           normalize = TRUE, k = 3, initialize_only = TRUE)

# Add measurement error (here: a fixed value for all observations)
dat_cens$error <- 1

# Plot
ggplot() +
  geom_pointrange(data = dat_cens[sel_uncens,], aes(x = x, y = y, ymin = y-error, ymax = y+error)) +
  geom_point(data = dat_cens[!sel_uncens,], aes(x = x, y = cut), shape = 6)

# Quick test that JAGS runs
test <- lc_fixedsplines_tp(data = dat_cens, x = "x", y = "y", uncensored = "uncensored", threshold = "cut",
                           measurement_error = "error", 
                           normalize = TRUE, k = 3, initialize_only = TRUE)


}
