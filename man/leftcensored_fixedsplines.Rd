% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/leftcensored_fixedsplines.R
\name{leftcensored_fixedsplines}
\alias{leftcensored_fixedsplines}
\title{Linear regression for left-censored data}
\usage{
leftcensored_fixedsplines(
  data,
  x = "x",
  y = "y_uncens",
  uncensored = "uncensored",
  threshold = "threshold",
  knots = 9,
  resolution = 50,
  n.chains = 4,
  n.iter = 5000,
  n.burnin = 1000,
  n.thin = 2
)
}
\arguments{
\item{data}{The data must have (at least) four columns: the predictor variable, the (uncensored) response variable,
a variable which is 1 for every uncensored observation, and a variable with the threshold of censoring for every censored observation}

\item{x}{Variable name for the predictor (independent) variable}

\item{y}{Variable name for the response (dependent) variable. The censored values can be anything (they will be set to NA
depending on the values of \code{uncensored}}

\item{uncensored}{Variable name for a variable which is 1 for uncensored values and 0 for censored
values.}

\item{threshold}{Variable name for a variable containing the threshold for censoring (e.g. for chemical data,
limit of detection or limit of quantification).It may be constant, or it may vary for each observation censored observation.}

\item{knots}{Either a single number for the number of equidistant knots, or a vector giving
the placement of the knots.}

\item{resolution}{The number of points along the x axis used to describe the spline.}

\item{n.chains}{The number of MCMC chains (replicates) to run. The default is 4. Using more than 1 chain enables us to say whether}

\item{n.iter}{The number of iterations for each MCMC chains. The default is 5000, which is usually sufficient for this application.}

\item{n.burnin}{The number of iterations to remove at start of each MCMC chain, before results are collected for statistics. The default is 1000.
If n.burnin is too small, plots of the trace (see examples) will show whether the chains are homogeneous along the chain (there should be from
no decreasing or increasing trend in the traceplot). One can also use R2jags::traceplot to assess whether the chains behave differently,
depending on their diferent starting point. If they do, n.burnin should be increased.}

\item{n.thin}{The number of MCMC iterations that are kept for statistics.}
}
\value{
The function returns a list with two parts: \code{summary} and \code{model}. \code{summary} shows a summary of the result, i.e., estimates
of the parameters of the linear regression: intercept, slope and sigma (the estimated standard deviation of the data around the regression line).
It is common to use the quantiles for parameter estimates, i.e., using the
50\% quantile as the "best estimate" of the parameters, and using the 2.5\% and 97.5\% quantiles as endpoints of a 95\% confidence interval.
\code{model} is the output of the jags() command, which is what \code{lm_linear()} runs under the hood for estimation.
It is an MCMC object, which has methods for functions such as plot (see ?mcmc). If you have some knowledge of the MCMC technique for
state-space models, this can be used for diagnostic plots of the model. See examples.
}
\description{
This function runs spline regression (with fixed number and placement of knots) when the dependent
(y) variable is left-censored. That is, if the actual value is below some below some limit
of quantification, LOQ, we we cannot measure it. We only know that the actual value is
somewhere below LOQ. If the data are given as typical chemical measurements with one column
containing "<" for measurements below LOQ, and the value column giving the LOQ value in those cases,
you may want to use prepare_data() to make your data ready.
}
\examples{
# Simulate data and estimate regression
sim <- lc_simulate(n = 30)
result <- lm_linear(sim$data)

# Get best estimates and plot its regression line on top of the plot  
a <- result$summary$quantiles["intercept", "50\%"]
b <- result$summary$quantiles["slope", "50\%"]
abline(a, b, col = "green2")

# Example with real data
# Prepare the data
data_test <- prepare_data(concentrations)

# Perform the analysis
result <- lm_linear(df_test2)

# MCMC summary
result$summary

# Check quantiles of the parameters
result$summary$quantiles

# Make a standard MCMC plot: the trace and the density for each estimated parameter  
par(mar = c(2,4,3,1))
plot(result$model)

# Plot the trace for each MCMC run  
par(mfrow = c(2,2), mar = c(2,4,3,1))
traceplot(result$model, ask = FALSE)

}
\keyword{Statistics,}
\keyword{censored}
\keyword{regression,}
